I"9#<h2 id="with">with</h2>
<p>with는 코틀린 표준 라이브러리 함수로 람다식 안에서 다른 객체의 메소드를 호출 할 수 있게 해준다.</p>

<p>아래와 같은 알파벳을 만드는 함수가 with를 사용하였을때 어떻게 변경 되는지 보자.</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="c1">//A부터 Z까지 print하는 흔한 함수</span>
<span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>

    <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="nc">StringBuilder</span><span class="p">()</span>

    <span class="k">for</span><span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"\nNow I know the alphabet!"</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">//with를 이용한 함수</span>
<span class="k">fun</span> <span class="nf">alphabetWith</span><span class="p">():</span> <span class="nc">String</span> <span class="p">{</span>

    <span class="kd">val</span> <span class="py">stringBuilder</span> <span class="p">=</span> <span class="nc">StringBuilder</span><span class="p">()</span>

    <span class="k">return</span> <span class="nf">with</span><span class="p">(</span><span class="n">stringBuilder</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">for</span><span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="nf">append</span><span class="p">(</span><span class="s">"\nNow I know the alphabet!"</span><span class="p">)</span>
        <span class="k">this</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><em class="fontHighlight1">with를 이용한 함수에서..</em></p>
<ul>
  <li>with 괄호() 안의 객체 stringBuilder는 수신객체이다.</li>
  <li>with 중괄호{} 안에서 this는 바로 수신객체인 stringBuilder를 가르킨다.</li>
  <li>중괄호{} 안에서 this를 호출하지 않아도 수신객체의 메소드를 바로 호출 할 수 있다.</li>
  <li>
    <p>with는 인자1개와 블럭으로 이루어진 statement같지만, 사실 파라미터가 2개인 함수이다.
<br />   파라미터1 : 수신객체인 stringBuilder
<br />   파라미터2 : 람다식 {}</p>
  </li>
  <li>수신 객체 지정 람다(lamda with receiver) : 이렇게 수신 객체를 람다안에서 명시 하지 않아도 다른 객체의 메소드를 호출 할 수 있는 람다를 ‘수신 객체 지정 람다’ 라고 부른다.</li>
</ul>

<p><span class="fontHighlight2">with식을 본문으로 하는 함수로 만들기</span>
<br />StringBuilder 참조 변수를 굳이 만들 필요 없이 바로 with식을 본문으로 사용할 수 있다.</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">fun</span> <span class="nf">alphabetWithExpress</span><span class="p">()</span> <span class="p">=</span> <span class="nf">with</span><span class="p">(</span><span class="nc">StringBuilder</span><span class="p">())</span> <span class="p">{</span>

    <span class="k">for</span><span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">append</span><span class="p">(</span><span class="s">"\nNow I know the alphabet!"</span><span class="p">)</span>

    <span class="nf">toString</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<hr />
<h2 id="apply">apply</h2>

<p>apply  함수는 with와 거의 같다. 유일하게 다른점은 apply는 항상 자신에게 전달된 객체(수신 객체)를 반환한다는 것이다.</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">fun</span> <span class="nf">alphabetApply</span><span class="p">()</span> <span class="p">=</span> <span class="nc">StringBuilder</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>

    <span class="k">for</span><span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">append</span><span class="p">(</span><span class="s">"\nNow I know the alphabet!"</span><span class="p">)</span>

<span class="p">}.</span><span class="nf">toString</span><span class="p">()</span></code></pre></figure>

<ul>
  <li>apply는 확장함수로 정의돼 있다. (Ref.https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html)
<img src="/blog/assets/images/kotlin/apply.jpg" alt="apply" /></li>
  <li>위 식에서 알수 있듯이 apply의 반환객체는 수신객체(StringBuilder()) 의 자신이다. (apply{} == Stringbuilder())</li>
  <li>
    <p>따라서 apply의 결과값의 toString을 호출 해서 값을 얻어 낼 수 있다.</p>
  </li>
  <li>apply 함수는 객체를 초기화하는 용도로 쓰이기 좋다.(자바의 builder와 같은)</li>
</ul>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="kd">class</span> <span class="nc">TextView</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="py">text</span> <span class="p">=</span> <span class="s">""</span>
    <span class="kd">var</span> <span class="py">textSize</span> <span class="p">=</span> <span class="m">0</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">createViewWithCustomAttribuetes</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">)</span> <span class="p">=</span>
        <span class="nc">TextView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="nf">apply</span><span class="p">{</span>
            <span class="n">text</span> <span class="p">=</span> <span class="s">"sample Text"</span>
            <span class="n">textSize</span> <span class="p">=</span> <span class="m">40</span>
        <span class="p">}</span></code></pre></figure>

<ul>
  <li>위 예와 같은 [ StringBuilder().appy{}.toString() ] 역할을 해주는 표준 라이브러리 함수가 별도로 있다.
<br />buildString 함수인데, 내부를 살펴 보면 StringBuilder를 확장하여 String을 반환하고 있다.
<br />(Ref. https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/build-string.html)
<img src="/blog/assets/images/kotlin/buildString.jpg" alt="buildString" /></li>
</ul>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">fun</span> <span class="nf">alphabetBuildString</span><span class="p">()</span> <span class="p">=</span> <span class="nf">buildString</span><span class="p">{</span>

    <span class="k">for</span><span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">append</span><span class="p">(</span><span class="s">"\nNow I know the alphabet!"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

:ET