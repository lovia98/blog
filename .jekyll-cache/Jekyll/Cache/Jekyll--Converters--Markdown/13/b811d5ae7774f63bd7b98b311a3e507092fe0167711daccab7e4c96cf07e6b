I"S<h3 id="if-expression"><em>If Expression</em></h3>

<p><br />코틀린에서는 if 조건절에서 value를 리턴할수 있다.
<br />따라서 다음과 같은 삼항 조건 연산자가 존재하지 않는다. 예) (x=1)? “true” : “false”</p>
<pre><code>
  //전통적인 방식
  var max: Int
  if (a&lt;b) {
    max = a
  }else {
    max = b
  }

  //코틀린에선 다음과 같이 바로 if에서
  //return value 값을 변수에 할당해 줄수 있다.
  val max = if(a &gt; b) a else b

  //if 블럭안에 다른 코드가 있는 경우 마지막 구문이 반환 값이 된다.
  val max = if(a &gt; b) {
    print("Choose a")
    a
  } else {
    print("Choose b")
    b
  }
</code></pre>

<ul>
  <li>위와 같이 if결과값을 변수에 할당해야 하는 경우(if절로 부터 리턴받아야 할 값이 있는 경우)라면 반드시 else절이
 존재 해야 한다.</li>
</ul>
<pre><code>
 //오류 발생 없음
  if(a &gt; b) {
    println("It's Ok")
    a
  }

 //else가 없어서 syntax 오류 발생
 val max = if(a &gt; b) {
   println("It's Ok")
   a
 }
 </code></pre>

<hr />
<h3 id="when-expression"><em>When Expression</em><br /><br /></h3>
<ul>
  <li>C계열 언어의 switch문과 같음.</li>
  <li>when문은 각각의 branches의 조건문이 만족할 때 까지 위에서 부터 순차적으로 인자를 비교함.</li>
</ul>
<pre><code>
when(x) {
    1 -&gt; print("x == 1")
    2 -&gt; print("x == 2")
    else -&gt; {
        print("x is neither 1 nor 2")
    }
}
</code></pre>
<ul>
  <li>if절과 마찬가지로 반환값을 넘길 수 있다.</li>
</ul>
<pre><code>
 fun whenTest5(x : Int) {
    val result:String = when(x) {
         3 -&gt; "3"
         4 -&gt; "4"
        else -&gt; "else"
    }
}
 </code></pre>
<ul>
  <li><code class="highlighter-rouge">is</code> or <code class="highlighter-rouge">!</code> 연산자를 이용하여 객체 타입 체크</li>
</ul>
<pre><code>
fun hasPrefix(x: Any) = when(x) {
  is String -&gt; x.startsWith("prefix")
  else -&gt; false
}
</code></pre>
<ul>
  <li>인자 없이 branch에 조건절을 지정하여 true인 branch 실행</li>
</ul>
<pre><code>
 when {
     x.startsWith("0") -&gt; print("start 0")
     x.startsWith("1") -&gt; print("start 1")
     else -&gt; print("x is funny")
 }
</code></pre>
<ul>
  <li>그 밖의 다양한 사용법</li>
</ul>
<pre><code>
  when(x) {
    //x가 0,1 중 하나인지 체크 가능
      0, 1 -&gt; print("x == 0 or x == 1")
      else -&gt; print("otherwise")
  }

  when(x) {
    //임의의 특정값을 branch 조건식에 넣을 수 있다.
    parseInt(s) -&gt; print("s encodes x")
    else -&gt; print("s does not encode x")
  }

 //범위 체크
  val validNumbers = 50..100
  when(x) {
    in 1..10 -&gt; print("x is in the rage")
    in validNumbers -&gt; print("x is valid")
    !in 10..20 -&gt; print("x is outside the range")
    else -&gt; print("none of the above")
  }
</code></pre>

<hr />
<h3 id="for-loops"><em>For Loops</em><br /><br /></h3>
<ul>
  <li>for문은 iterator를 제공하는 모든 것을 반복 할수 있다.
<br />( - has a member- or extension-function iterator(), whose return type
<br /> - has a member- or extension-function next(), and
<br /> - has a member- or extension-function hasNext() that returns Boolean.)</li>
</ul>
<pre><code>
  for(item in collection) print(item)

  for(item: Int in ints) {
    //...
  }
</code></pre>

<ul>
  <li>범위 표현식을 이용하여 loop의 범위를 설정 할 수 있다.</li>
</ul>
<pre><code>
  for(i in 1..3) {
    println(i)
  }
  &gt;&gt;&gt;
  1
  2
  3  

  for(i in 6 downTo 0 step 2) {
    println(i)
  }
  &gt;&gt;&gt;
  6
  4
  2
  0
</code></pre>

<ul>
  <li>index를 사용하고 싶다면 indices를 이용하면 된다.xz</li>
</ul>
<pre><code>
  val array = arrayOf(1,2,3,4)
  for (i in array.indices) {
      println(array[i])
  }
  &gt;&gt;&gt;
  1
  2
  3
  4
</code></pre>
<hr />
<h3 id="-while-loops">* While Loops*<br /><br /></h3>
<p>while문은 do..while과 유사하게 작동한다.</p>
<pre><code>
while (x &gt; 0) {
  x--
}

do {
  val y = retrieveData()
} while (y != null) // y is visible here!

</code></pre>

:ET